#!/usr/bin/env python

from argparse import ArgumentParser
import logging.handlers
import os.path
import datetime
import sys
import configparser
import json
import urllib.parse
import urllib.request
import urllib.error
import psycopg2
# Local imports
from ted.trigger_funcs import create_logger, get_region_name

"""
eventmatch_trigger.py - An application which adds events to a specified Postgres table.
This application presumes that it will be called by the Product Distribution Product Indexer.
"""
def insert_from_dict(dictionary):
    """
    Take items from event dictionary and insert into event_ext table in database.
    dictionary: Event dictionary with the following fields, all containing STRINGS:
                - type: Message type (usually 'add')
                - id: Event id
                - source: Event source ('us', 'ci', etc.)
                - time: Event time (20110415173724.011)
                - lon: Event longitude
                - lat: Event latitude
                - depth: Event depth
                - mag: Event magnitude
                - loc: Event location (FE Region)
                - uri: Event location on USGS NEIC web site.
    """

    # Connect to database
    prefix = 'testDB'
    port = config.get('DATABASE',prefix+'_port')
    user = config.get('DATABASE',prefix+'_user')
    dbname = config.get('DATABASE',prefix+'_name')
    password = config.get('DATABASE',prefix+'_password')

    conn = psycopg2.connect(dbname=dbname, user=user, port=port, password=password)
    conn.autocommit = True
    cur = conn.cursor()

    try:
        eventtime = dictionary['time'][:8] + 'T' + dictionary['time'][8:]
        # Add event to database
        cur.execute("INSERT INTO event_ext (event_time, event_id, event_lat, event_lon," + \
                    " magnitude) VALUES (%s, %s, %s, %s, %s);", (eventtime, dictionary['id'],
                    dictionary['lat'], dictionary['lon'], dictionary['mag']))
    except Exception as e:
        logger.error("Failed to insert event dictionary into event_ext table", exc_info=True)
    finally:
        logger.info("Successfully inserted event '%s' into event_ext table.", dictionary['id'])
        cur.close()
        conn.close()

def call_inserter(options):
    """
    Called by __main__. Creates event dictionary and calls insert_from_dict(). 
    options: Dictionary with the following fields, all containing STRINGS:
             - status: Event status (default is 'UPDATE')
             - preferredmagnitude: Prefered event magnitude
             - preferredLongitude: Preferred event longitude
             - preferredLatitude: Preferred event latitude
             - code: Event code
             - action: Action to take with event
             - eventIDList: All associated event IDs for event
             - preferredEventTime: Preferred event time
             - source: Network that generated product
             - preferredDepth: Preferred event depth
             - updateTime: Time when this version of event was updated
             - trackerURL: Location where tracking updates are sent 
             - directory: Path to directory that contains product contents
             - preferredID: Preferred event ID
             - type: Event type (should be 'origin')
    """
    # If event is not an event add or event update trigger, exit application
    if options['action'] not in ['EVENT_ADDED','EVENT_UPDATED']:
        logger.info("Ignoring all actions but 'EVENT_ADDED' and 'EVENT_UPDATED'. Exiting.")
        sys.exit(0)

    # If network source is in ignoreregions list, exit application
    ignoreregions = config.get('SETUP','ignoreregions').split(',')
    if options['source'].lower() in ignoreregions:
        logger.info("Ignoring region '%s'. Exiting.", options['source'].lower())
        sys.exit(0)

    # If event code is not same as preferred event ID, exit application
    if options['code'] != options['preferredID']:
        logger.info("Ignoring non-preferred ID '%s'. Exiting.", options['code'])
        sys.exit(0)

    try:
        eventdt = datetime.datetime.strptime(options['preferredEventTime'],'%Y-%m-%dT%H:%M:%S.%fZ')

        eventdict = {}
        eventdict['type'] = 'add'
        eventdict['id'] = options['preferredID'].lower()
        eventdict['source'] = options['source'].lower()
        eventdict['time'] = eventdt.strftime('%Y%m%d%H%M%S.00')
        eventdict['lat'] = '%.4f' % float(options['preferredLatitude'])
        eventdict['lon'] = '%.4f' % float(options['preferredLongitude'])
        eventdict['depth'] = '%.1f' % float(options['preferredDepth'])
        eventdict['mag'] = '%.1f' % float(options['preferredMagnitude'])
        eventdict['loc'] = get_region_name(float(options['preferredLatitude']),float(options['preferredLongitude']))
        urlt = config.get('SETUP','urltemplate')
        eventdict['uri'] = urlt.replace('[EVENT]',options['preferredID'].lower())
    except Exception as e:
        logger.error("Error caught while creating event dictionary", exc_info=True)

    insert_from_dict(eventdict)

    # Exit application
    sys.exit(0)

if __name__ == '__main__':
    parser = ArgumentParser(prog='triggerEventMatch', usage ='%(prog)s [options]')

    # Product Indexer command line API options
    parser.add_argument("--directory", dest="directory",
                      help="""Optional. <directory> is a path to a directory that contains product contents. Any directory
                      hierarchy within <directory> is preserved.""", metavar="DIRECTORY")
    
    parser.add_argument("--type", dest="type",
                      help="""Product TYPE. A short identifier that is shared by all sources of a type of product.
                      Examples include origin, shakemap, pager, etc. """, metavar="TYPE")
    
    parser.add_argument("--code", dest="code",
                      help="""Event CODE: 2 character source code plus 8 character network event code.
                      Examples include us2009abcd and ci12345678""", metavar="CODE")
    
    parser.add_argument("--source", dest="source",
                      help="""Network SOURCE that generated this product, as a two character network code.
                      Examples include us, nc, and ci.""", metavar="SOURCE")
    
    parser.add_argument("--updateTime", dest="updateTime",
                      help="""Optional. Default is now. When this version of source+type+code was updated.
                      An example is 2010-01-14T14:11:28.691-07:00.""", metavar="UPDATETIME")
    
    parser.add_argument("--status", dest="status",
                      help="""Optional. Default is UPDATE. Product generators may use any status without spaces.
                      However, the status must be used consistently for all products of that type.
                      Examples include UPDATE, and DELETE.""", metavar="STATUS")
    
    parser.add_argument("--trackerURL", dest="trackerURL",
                      help="A location where tracking updates are sent.", metavar="TRACKERURL")

    parser.add_argument("--action", dest="action",
                      help="""ACTION is one of: EVENT_ADDED,EVENT_SPLIT,EVENT_UPDATED,EVENT_DELETED,EVENT_MERGED,EVENT_ARCHIVED
                      PRODUCT_ADDED,PRODUCT_UPDATED,PRODUCT_DELETED,PRODUCT_ARCHIVED""", metavar="ACTION")
    
    parser.add_argument("--preferred-eventid", dest="preferredID",
                      help="""The full (source+code) preferred event ID for this event.""", metavar="PREFERREDID")
    
    parser.add_argument("--eventids", dest="eventIDList",
                      help="""All of the associated event IDs for this event.""", metavar="EVENTIDS")
    
    parser.add_argument("--preferred-magnitude", dest="preferredMagnitude",
                      help="""The preferred magnitude for this event.""", metavar="PREFERREDMAG")
    
    parser.add_argument("--preferred-latitude", dest="preferredLatitude",
                      help="""The preferred latitude for this event.""", metavar="PREFERREDLAT")
    
    parser.add_argument("--preferred-longitude", dest="preferredLongitude",
                      help="""The preferred longitude for this event.""", metavar="PREFERREDLON")
    
    parser.add_argument("--preferred-depth", dest="preferredDepth",
                      help="""The preferred depth for this event.""", metavar="PREFERREDDEPTH")
    
    parser.add_argument("--preferred-eventtime", dest="preferredEventTime",
                      help="""The preferred event time (2010-01-14T14:11:28.691Z).""", metavar="PREFERREDDEPTH")
    


    # Filter out any options that are not in the above list
    # Get the list of defined options
    options = {}
    validargs, invalidargs = parser.parse_known_args()
    options = vars(validargs)

    # Print help menu and exit if none of options are defined
    foundOne = False
    for argvalue in options.values():
        if argvalue != None:
             foundOne = True
             break
    if not foundOne:
        parser.print_help()
        sys.exit(0)

    # Read in config file
    homedir = os.path.dirname(os.path.abspath(__file__))
    configfile = os.path.join(homedir,'configEventMatch.ini')
    if not os.path.isfile(configfile):
        print("File \"%s\" does not exist.  Exiting", configfile)
        sys.exit(1)

    config = configparser.ConfigParser()
    config.read_file(open(configfile))

    if not config.has_section('SETUP'):
        print("Config file \"%s\" is missing section \"SETUP\".  Exiting", configfile)
        sys.exit(1)

    reqoptions = ['ignoreregions','logging_level','logfile']

    missing = []
    for option in reqoptions:
        if not config.has_option('SETUP',option):
            missing.append(option)
    if len(missing):
        print("Config file \"%s\" is missing SETUP options \"%s\".  Exiting", configfile,','.join(missing))
        sys.exit(1)

    # Instruct logging module when to back up logfile and create new, empty one
    # Logfile will be archived once a week on Monday, and only 8 will be kept at a time.
    bkup_inttype = 'W0' # W0 = Monday
    bkup_interval = 1
    bkup_count = 8
    bkup_suffix = '%Y-%m-%d_%H:%M:%S'
    # Create logfile
    logger = create_logger(bkup_inttype, bkup_interval, bkup_count, bkup_suffix)

    call_inserter(options)    
